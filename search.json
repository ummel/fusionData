[{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://ummel.github.io/fusionData/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://ummel.github.io/fusionData/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kevin Ummel. Author, maintainer. Karthik Akkiraju. Contributor. Hero Ashman. Contributor. Cora Kingdon. Contributor. Miguel Poblete Cazenave. Contributor. Steven Herrera Tenorio. Contributor.","code":""},{"path":"https://ummel.github.io/fusionData/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ummel K (2023). fusionData: Data backend fusionACS platform. R package version 1.0.3, https://ummel.github.io/fusionData/.","code":"@Manual{,   title = {fusionData: Data backend for fusionACS platform},   author = {Kevin Ummel},   year = {2023},   note = {R package version 1.0.3},   url = {https://ummel.github.io/fusionData/}, }"},{"path":"https://ummel.github.io/fusionData/index.html","id":"fusiondata","dir":"","previous_headings":"","what":"Data backend for fusionACS platform","title":"Data backend for fusionACS platform","text":"Kevin Ummel (ummel@berkeley.edu) Overview Setup install Usage structure Ingest survey data Document variables Harmonize variables Compile spatial data Prepare fusion inputs Generate fusion outputs","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Data backend for fusionACS platform","text":"fusionData used create manage data inputs underpinning larger fusionACS platform. facilitates number steps overall fusionACS workflow: Ingest: Process raw survey data using standard approach formatting. Document: Document survey variables compile “universal” data dictionary. Harmonize: Harmonize variables “donor” surveys American Community Survey (ACS). Compile spatial data: Compile data multiple spatial datasets merging survey microdata. Prepare fusion inputs: Prepare harmonized donor ACS microdata fusion inputs. Generate fusion outputs: Fuse donor variables ACS microdata using fusionModel.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"setup-and-install","dir":"","previous_headings":"","what":"Setup and install","title":"Data backend for fusionACS platform","text":"fusionData master branch can cloned project directory local machine using RStudio instructions. Use following setup parameters: prompted enter Github username password. may prompted install package dependencies. use multi-factor authentication Github credentials, need enable SSH key, need use git@github.com:ummel/fusionData.git Repository URL setup parameters. Although fusionData structured (loadable) R package, also acts code data repository shared continuously modified authorized users. fusionData grows time new surveys spatial datasets – code needed process manipulate – added. Now shared Github repository cloned local drive (/fusionData project directory), can install package locally load . step install required package dependencies may take awhile. redirected browser window enter credentials Google Drive account storing fusionData’s remote files. password provided separately approved users. Whenever fusionData package loaded, checks current working directory set local /fusionData directory (issue error otherwise). package works (expects) particular directory structure locally mimicked Github repository. fusionData includes convenience function called installPackage() safely update (re-install) local installation fusionData package. modify important code pull changes Github repository, necessary re-install fusionData package locally get functionality. example, function added modified Github, local installation won’t reflect changes pull re-install. installPackage() number operations initial devtools::install() didn’t, let’s go ahead run now: full functionality, also necessary download least remotely-stored survey microdata processed spatial data files. following section (“Usage structure”) provides detail associated reasoning. functions getSurveyProcessed() getGeoProcessed() offer easy way . example, run code README minimally need: downloads may take minutes. files automatically placed appropriate sub-directories /fusionData local drive, directories created necessary. successful download, fusionData “system” ready go.","code":"Repository URL: https://github.com/ummel/fusionData Project directory name: fusionData # Do initial local install of the fusionData package devtools::install(quick = TRUE)  # Load the fusionData package library(fusionData) installPackage() # Download RECS 2015 processed survey microdata file getSurveyProcessed(survey = \"RECS_2015\")  # Download only the essential remote spatial data files getGeoProcessed(dataset = \"essential\")"},{"path":"https://ummel.github.io/fusionData/index.html","id":"usage-and-structure","dir":"","previous_headings":"","what":"Usage and structure","title":"Data backend for fusionACS platform","text":"modify code files local /fusionData project directory, need commit push changes Github repository accessible users. addition, good practice pull latest version repository Github prior making modifications. way, know working latest shared version. easily done using “Git” panel RStudio IDE. Since Github places limits file/repository size, store certain data files “remotely” – , outside Github repository. remotely-stored data files integral overall fusionData “system”, present Github repository . Instead, remote files (associated directory structure) stored Google Drive can automatically safely added user’s local /fusionData folder using provided functions. remote files added, user’s local fusionData package fully functional. Remote data files fairly static. , user typically needs update (re-download) remote files local fusionData directory important changes made. don’t generally need keep track files stored remotely Github repository (.gitignore file handles ). summary: Github repository stores code needed build document fusionData architecture. Large /infrequently-modified data files stored remotely. Users can download/upload remote files /local /fusionData directory -needed. users add modify code, changes committed locally pushed Github repository become subject code reviews, versioning control, accessible users. overview top-level directories fusionData repository, including Github-based “remote” elements.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"github","dir":"","previous_headings":"Usage and structure","what":"/.github","title":"Data backend for fusionACS platform","text":"Auto-generated files producing fusionData’s public documentation website. users need access/modify directory.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"r","dir":"","previous_headings":"Usage and structure","what":"/R","title":"Data backend for fusionACS platform","text":".R scripts defining functions “fusionData things” (exported). users need access/modify directory.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"man","dir":"","previous_headings":"Usage and structure","what":"/man","title":"Data backend for fusionACS platform","text":"Documentation (.e. “manual”) functions /R data /data, usual R packages. users need access/modify directory.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"data","dir":"","previous_headings":"Usage and structure","what":"/data","title":"Data backend for fusionACS platform","text":"Package-wide .rda data files. Loadable via data(), usual R packages. users need access/modify directory.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"data-raw","dir":"","previous_headings":"Usage and structure","what":"/data-raw","title":"Data backend for fusionACS platform","text":".R scripts needed create package-wide .rda objects /data, usual R packages. users need access/modify directory.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"universe","dir":"","previous_headings":"Usage and structure","what":"/universe","title":"Data backend for fusionACS platform","text":"Directory “Universal Survey Dictionary” Shiny app. app can run calling universe(). users need access/modify directory.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"harmony","dir":"","previous_headings":"Usage and structure","what":"/harmony","title":"Data backend for fusionACS platform","text":"Directory “Survey Harmonization Tool” Shiny app. app can run calling harmony(). users need access/modify directory.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"survey-processed","dir":"","previous_headings":"Usage and structure","what":"/survey-processed","title":"Data backend for fusionACS platform","text":"Contains processed survey data associated code. Sub-directories refer specific surveys vintages. Users responsible ingesting raw survey microdata add custom processing code directory. Example: /survey-processed/RECS/2015 Github repository version /survey-processed contains two kinds files: Custom .R scripts transform raw survey microdata (located /survey-raw) “processed” versions adhere certain requirements, structure, naming conventions. Example: /survey-processed/RECS/2015/RECS_2015_H_processed.R “Dictionary” files (.rds) contain standardized metadata variable descriptions particular survey. Example: /survey-processed/RECS/2015/RECS_2015_H_dictionary.rds /survey-processed also includes .fst files containing processed microdata . files stored remotely can added user’s local fusionData directory calling getSurveyProcessed(). example, .fst file /survey-processed/RECS/2015/RECS_2015_H_processed.fst contains processed, household-level microdata 2015 RECS. code creates file found /survey-processed/RECS/2015/RECS_2015_H_processed.R. .R file part Github repository (see ), .fst file stored remotely. Use .fst files allows data read quickly disk, part full. Functions fusionData package take advantage .","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"survey-raw","dir":"","previous_headings":"Usage and structure","what":"/survey-raw","title":"Data backend for fusionACS platform","text":"remote directory (.e. present Github repository) containing raw survey data files. Sub-directories refer specific surveys vintages. Users responsible ingesting raw survey microdata add raw data files directory. Example: /survey-raw/RECS/2015 /survey-raw can downloaded added user’s local fusionData directory calling getSurveyRaw(). However, practice, reason user store raw survey data locally unless survey actively processing editing. processed version survey (*_processed.fst) stable uploaded remote Google Drive, users can access use processed version without ever needing download look original/raw data.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"geo-processed","dir":"","previous_headings":"Usage and structure","what":"/geo-processed","title":"Data backend for fusionACS platform","text":"Contains processed spatial data associated code. Sub-directories refer specific spatial datasets. users need access/modify directory. users modifying adding spatial datasets, sufficient call getGeoProcessed(dataset = \"essential\") load essential “geo” files. Example: /geo-processed/EPA-SLD Github repository version /geo-processed contains following kinds files: Custom .R scripts transform raw spatial data (located /geo-raw) processed .rds files meet certain requirements. Example: /geo-processed/EPA-SLD/epa-sld_v3_processed.R /geo-processed also includes .rds files containing processed spatial data . files stored remotely can added user’s local fusionData directory calling getGeoProcessed(). example, .rds file /geo-processed/EPA-SLD/epa-sld_v3_processed.rds contains processed spatial variables version 3 EPA’s Smart Location Database (SLD). code creates file found /geo-processed/EPA-SLD/epa-sld_v3_processed.R. .R file part Github repository (see ), .rds file stored remotely. Importantly, /geo-processed remote content also includes two “essential” spatial data files , practice, users need perform data fusion locally. files roles described detail later . geo_predictors.fst concordance/geo_concordance.fst","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"geo-raw","dir":"","previous_headings":"Usage and structure","what":"/geo-raw","title":"Data backend for fusionACS platform","text":"remote directory (.e. present Github repository) containing raw spatial data files. Sub-directories refer specific spatial datasets. users need access/modify directory. Example: /geo-raw/EPA-SLD /geo-raw can downloaded added user’s local fusionData directory calling getGeoRaw(). However, practice, reason user store raw spatial data locally unless spatial dataset actively processing editing.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"fusion","dir":"","previous_headings":"Usage and structure","what":"/fusion","title":"Data backend for fusionACS platform","text":"Contains production-level fusion input output files generated fusionInput() fusionOutput(). Users call functions perform fusion typically don’t need access/modify directory . Almost fusion input/output files stored remotely given size. files pushed Github repository .txt log files contain information fusionInput() fusionOutput() function calls.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"production","dir":"","previous_headings":"Usage and structure","what":"/production","title":"Data backend for fusionACS platform","text":"now-DEPRECATED directory containing code possibly data older “production” fusion runs. Superseded /fusion.","code":""},{"path":"https://ummel.github.io/fusionData/index.html","id":"ingest-survey-data","dir":"","previous_headings":"","what":"Ingest survey data","title":"Data backend for fusionACS platform","text":"“Ingesting” survey requires transforming raw survey data “processed” (.e. standardized) microdata files meet certain requirements. fusionData codebase depends processed microdata recognizable structure features. ingestion process survey documented defined .R script (possibly multiple scripts) must written manually. goal produce data.frame containing microdata observations (ideally) meet following conditions: Contains many observations variables possible. Variable names descriptions taken official codebook, possibly modified clarity. Official variable names coerced lower-case alphanumeric, possibly using single underscores. Codes used raw data replaced descriptive labels codebook; e.g. integer values replaced associated factor levels. “valid blanks” raw data set plausible values; NA’s often actual zeros knowable value based question structure. “invalid blanks” missing values raw data imputed; generic imputation function provided purpose. Ordered factors used defined whenever possible (opposed unordered). Standard column names used unique household identifiers (e.g. “acs_2019_hid”); person-level microdata within-household person identifier (integer) always “pid”. Standard column names used observation weights; “weight” primary weighting variable “rep_1”, etc. replicate weights. Variables identifying respondent location consistent defined geo-processed/concordance/geo_concordance.fst. Let’s look variables processed RECS 2015 microdata get sense preferred output looks like. Note file name includes _H_ identifier, indicating microdata question household-level. Surveys include household person-level respondent information two files – “H” “P” microdata. RECS household (“H”) microdata. Notice household ID variable standardized name (“recs_2015_hid”), observation weights column (“weight”) first 96 replicate weights (“rep_1”). microdata consisted person-level observations nested within households (e.g. ACS), additional “pid” integer variable uniquely identify person within household. case “sizeofgarage” (original variable name RECS), raw data contained NA’s (valid “skips”) households without garage. blanks replaced intelligible label (“garage”). addition, “sizeofgarage” classed ordered factor, since labels natural ordering. variable “recs_iecc_zone” tells us something respondent’s location (IECC climate zone). spatially-referenced variables defined named consistent variables geo-processed/concordance/geo_concordance.fst file. allows subsequent operations intelligently impute respondent location prior fusion. details spatial data location imputation can found subsequent sections. important location variables donor survey precisely consistent defined geo_concordance.fst. latter file can modified, necessary, add new location variables allow concordance. strictly necessary donor survey include variable (set variables) provide maximum information respondent location. example, survey contained “county” variable, reason include “state” – though code shouldn’t break included. surveys (like RECS) complicated combination location variables collectively define respondent location spatial intersection. fusionData’s code base automatically handles , provided location variables consistent (.e. name levels) donor microdata geo_concordance.fst file. need specify variables location variables; determined automatically looking overlap column names geo_concordance.fst file. can see , exactly, raw survey data transformed viewing associated code /survey-processed/RECS/2015/RECS_2015_H_processed.R. Given variety survey data structures conventions, strict procedure .R file(s) written. However, common steps tools likely applicable surveys. RECS_2015_H_processed.R script good “template” regard, since includes many common operations – including imputation NA’s using provided imputeMissing() function. RECS 2015 comparatively simple microdata documentation structure: household-level microdata single .csv file associated .xls codebook. surveys require complex steps assemble necessary microdata. limit number nature .R files can used ingest survey. multiple .R files used, file names include two-digit sequence front indicate order scripts employed (01*.R, 02*.R, etc.). .R files include liberal use comments help others understand code later. Good practice comments explain piece code included, just . cases, .R script eventually saves _processed.fst microdata file disk must include use labelled::set_variable_labels assign variable descriptions (ideally, taken official codebook) column. script must call createDictionary() function create save standardized “dictionary.rds” file. createDictionary() uses assigned variable descriptions information microdata build dictionary standardized way. can see end RECS_2015_H_processed.R: resulting dictionary file RECS 2015. practice, reason typical user ever open survey’s dictionary file. preferred much useful way explore survey metadata variable descriptions via universe() function described next section.","code":"recs <- fst::read_fst(\"survey-processed/RECS/2015/RECS_2015_H_processed.fst\") head(select(recs, recs_2015_hid, weight, rep_1, sizeofgarage, recs_iecc_zone)) recs_2015_hid weight rep_1   sizeofgarage           recs_iecc_zone 1         10001  12090 16560 Two-car garage IECC climate zones 3B-4B 2         10002  14400 21500      No garage IECC climate zones 1A-2A 3         10003  23330 12300      No garage     IECC climate zone 3A 4         10004  12170 18550 Two-car garage     IECC climate zone 4A 5         10005  16720  8080 One-car garage     IECC climate zone 5A 6         10006  26060 37000      No garage IECC climate zones 6A-6B class(recs$sizeofgarage) [1] \"ordered\" \"factor\" levels(recs$sizeofgarage) [1] \"No garage\"                \"One-car garage\"           [3] \"Two-car garage\"           \"Three-or-more-car garage\" recs.dictionary <- readRDS(\"survey-processed/RECS/2015/RECS_2015_H_dictionary.rds\") head(recs.dictionary) # A tibble: 6 × 8   survey vintage respondent variable  description             values type      n   <chr>  <chr>   <chr>      <chr>     <chr>                   <chr>  <chr> <int> 1 RECS   2015    H          adqinsul  Level of insulation     [Not … ord    5686 2 RECS   2015    H          agecdryer Age of clothes dryer    [No c… ord    5686 3 RECS   2015    H          agecenac  Age of central air con… [No c… ord    5686 4 RECS   2015    H          agecwash  Age of clothes washer   [No c… ord    5686 5 RECS   2015    H          agedw     Age of dishwasher       [No d… ord    5686 6 RECS   2015    H          agefrzr   Age of most-used freez… [No f… ord    5686"},{"path":"https://ummel.github.io/fusionData/index.html","id":"document-variables","dir":"","previous_headings":"","what":"Document variables","title":"Data backend for fusionACS platform","text":"previous section showed survey’s “dictionary.rds” file(s) created. Whenever dictionary file added updated, necessary run compileDictionary() function compile fusionData’s individual survey dictionaries single “universal” dictionary. usage straightforward: console output reveals, compileDictionary() updates two files: data/dictionary.rda data/surveys.rda. files part Github repository used “Universal Survey Dictionary” “Survey Harmonization Tool” Shiny apps part fusionData. first time calling compileDictionary() new survey, need add survey abbreviation description survey R script universe/app.R line 32 can called universe() (described ). “Universal Survey Dictionary” Shiny app can accessed following call: open app browser window. tool allows “universe” available variables – across ingested surveys – sorted searched. user consult universal dictionary initial ingestion new survey, effective way identify variables need additional editing.","code":"compileDictionary() # Open \"Universal Survey Dictionary\" Shiny app universe()"},{"path":"https://ummel.github.io/fusionData/index.html","id":"harmonize-variables","dir":"","previous_headings":"","what":"Harmonize variables","title":"Data backend for fusionACS platform","text":"donor survey successfully ingested documented, possible start thinking fuse survey ACS. statistical linchpin fusion process set “harmonized” variables common donor survey ACS. Identifying conceptually similar variables across surveys determining can modified measure similar concepts one important steps process. also potentially time-consuming error-prone. “Survey Harmonization Tool” created make process easier safer. Shiny app makes easier detect, specify, save “harmonies” constructed variables donor surveys variables ACS. app launches browser window following call: present, harmony() app allows specification harmonies non-ACS donor survey specific ACS vintage (e.g. harmonizing 2015 RECS 2015 ACS). Construction harmony generally follows steps: Select donor survey vintage. Select recipient ACS vintage. Select “Donor variable” drop list. list searchable help locate variables associated certain words. Select “ACS variable” use “side” harmony. factor variables, edit “Group” columns spreadsheet objects create maximum-resolution harmony two variables. can see “live” outcome specified harmonization strategy table bottom page. continuous variables, additional modification needed long two variables measure similar concepts. harmony specified like, click “Submit harmony”. button becomes available click minimal safety checks passed valid harmony. user clicks “Submit harmony”, currently-specified harmony (defined selected variables settings) saved disk. Specifically, details particular harmony added appropriate .R “harmony file” located /harmony/harmonies. example, file describing harmonize RECS 2015 ACS 2015 variables RECS_2015__ACS_2015.R. receive pop-message indicating harmony successfully added local .R harmony file (created, necessary). can confirm harmony added selecting “View harmonies” panel. Probably easiest way become expert app view existing harmonies ’ve already constructed RECS CEI. show settings used give sense used. Additional details regarding “advanced” settings examples. may seem convoluted first. understand fields , becomes quite easy, fast, (almost) fun construct harmonies. Bin breakpoints Bin breakpoints field used specify continuous variable “binned” turn categorical variable – usually allow harmonization factor variable survey. useful identical concept measured continuous scale one survey (e.g. income dollars) factor variable survey (e.g. income range). Example: Select “moneypy” RECS 2015 see ACS “hincp” binned create harmony. Adjustment Adjustment field provides powerful way modify adjust variables accommodate non-standard harmonies. Text Adjustment field passed -dplyr::mutate() call within harmonize() modifies associated variable prior manipulation. text passed mutate() call can utilize variables microdata. quite powerful allows complicated harmonies accommodated. Example: Select “vehq” CEI 2015-2019. case, “vehq” (owned vehicles) “vehql” (leased vehicles) variables CEI – continuous – added together specifying “vehq + vehql” Adjustment field. result binned create harmony ACS “veh” variable, factor variable referring available vehicles, whether owned leased. Household aggregator Sometimes possible create harmony household-level (“H”) donor variable person-level (“P”) ACS variable, provided latter aggregated household level. cases, “Household aggregator” field tells harmonize() aggregate summarize person-level ACS variable within household. field applicable donor variable household variable selected ACS variable person-level (person-level donor variables can always harmonized directly person-level ACS variables). Simple example: Select “hhage” RECS 2015 (Respondent/head--household age). ACS “agep” variable can used create harmony, person-level variable. setting Household aggregator field “reference” instruct harmonize() use “reference person” value “agep” create household-level variable analogous “hhage”. Advanced example: Select “numchild” RECS 2015 (Number household members age 17 younger). ACS “agep” variable can used create harmony. Bin breakpoints used re-assign household member “agep” value 1 less 18 0 18 (see “Group” column associated spreadsheet). Household aggregator field set “sum” instruct harmonize() sum values household level, creates harmony “numchild”. advanced example: Select “as_comp1” CEI 2015-2019 (Number males age 16 ). , ACS “agep” variable can used create harmony (“numchild”), need additionally restrict harmony males . done using Adjustment field first set “agep” 0 females, bin result, sum household level. Comments Comments field used leave helpful information harmony constructed . harmony makes use one “advanced” settings probably comment explaining rationale. harmony file can dget-d return list lists, element defines harmony. Like one, defining harmony “fuelheat” variable RECS “hfl” variable ACS. list object contains information necessary construct RECS ACS microdata containing new variable called “fuelheat__hfl”; .e. harmonized version two associated heating fuel variables. precisely harmonize() function – typically called prepare() explained – using harmonies available specified harmony file. Note harmonized variables always indicated double-underscore (“__“). Using harmony() app manually define harmonies letting harmonize() take care subsequent data manipulation makes construction harmonized microdata easier, faster, much safer. generally advisable use harmonize() app create edit harmonies. also possible manually edit .R harmony files, necessary, careful. users eventually find constructing harmonies via app , result, modifying local version .R harmony files. means must commit push changes show Github repository – become available others use. also means important pull recent version repository begin working fusionData. Otherwise, risk duplicating efforts someone else /failing make use recent version harmony () files.","code":"# Open \"Survey Harmonization Tool\" Shiny app harmony() fuelheat__hfl = list( RECS = list( groups = 1:7, levels = c(\"Do not use space heating\", \"Electricity\", \"Fuel oil/kerosene\", \"Natural gas from underground pipes\", \"Propane (bottled gas)\", \"Some other fuel\", \"Wood (cordwood or pellets)\"), breaks = \"\", adj = \"\"), ACS = list( groups = c(5, 6, 2, 3, 1, 6, 6, 4, 7), levels = c(\"Bottled, tank, or LP gas\", \"Coal or coke\", \"Electricity\", \"Fuel oil, kerosene, etc.\", \"No fuel used\", \"Other fuel\", \"Solar energy\", \"Utility gas\", \"Wood\"), breaks = \"\", adj = \"\"), ordered = FALSE, comment = \"\", modified = \"2021-07-03 12:10:17\")"},{"path":"https://ummel.github.io/fusionData/index.html","id":"compile-spatial-data","dir":"","previous_headings":"","what":"Compile spatial data","title":"Data backend for fusionACS platform","text":"fusionData allows spatially-referenced data merged survey microdata, thereby expanding set potential predictor variables available fusion process. geographic “unit analysis” case consists PUMA’s, observed ACS households can imputed donor households. Ingestion spatial datasets generally less onerous survey data; fewer requirements processed data must meet. general strategy look familiar: Raw spatial data stored /geo-raw. raw data transformed “*_processed.rds” file stored /geo-processed. associated .R file stored location. processed spatial .rds file two hard requirements must meet. must contain “vintage” column indicating time period observation. vintage can year, year range (“2015-2016”), special value “always”. “always” value indicates measurement time-invariant (e.g. long-term climate “normal”). must contain column (columns) whose name values also found geo_concordance.fst file. columns define location measurement – via geo_concordance.fst file – mapped PUMA’s. Ordered factor variables classed ; categorical variables can character. (currently) necessary document variables, name certain way, create dictionary. Let’s look example. irs object contains processed spatial data constructed IRS Statistics Income (SOI) zip code tax return data 2018. underlying raw data stored remotely /geo-raw/IRS-SOI/2018. script used create “processed.rds” file available . “zcta10” column indicates Zip Code Tabulation Area (circa 2010) associated observation. “zcta10” variable also found “geo_concordance.fst” file, contains information link geographic units PUMA’s. creation relies heavily data Missouri Census Data Center’s Geocorr engine. information link zip codes PUMA’s used aggregate IRS-SOI data PUMA-level prior merging survey microdata. geo_concordance.fst file contains variety variables can used identify location observations processed spatial data file. documented Geocorr. Others added within geo-processed/concordance/geo_concordance.R file allow concordance variables found particular datasets. concordance file can expanded time necessary. cases, spatial dataset’s processed .rds file include multiple location variables used collectively achieve spatial concordance. example, spatial dataset block group observations must include columns “state”, “county10”, “tract10”, “bg10” order allow smooth merge concordance file (case EPA-SLD dataset). Unlike processed survey data, naming convention processed spatial data files quite relaxed. function compileSpatial() automatically detects compiles files /geo-processed ending “_processed.rds”. long processed spatial data file necessary suffix – meets two hard requirements mentioned – compiled geo_predictors.fst file. Whenever processed .rds file added updated, necessary run compileSpatial() update geo_predictors.fst file. geo_predictors.fst file contains variables vintages across available spatial datasets, aggregated PUMA-level preparation merging survey microdata. structure file unusual, intended worked directly. designed allow assemble() function (demonstrated ) efficiently read necessary data disk merges spatial variables particular donor recipient surveys. Consequently, unless user actively adding editing processed spatial data, “geo files” strictly necessary fusion process geo_predictors.fst geo_concordance.fst, can obtained calling getGeoProcessed(dataset = \"essential\").","code":"irs <- readRDS(\"geo-processed/IRS-SOI/IRS-SOI_2018_processed.rds\") head(irs[, 1:5]) # A tibble: 6 × 5   zcta10 vintage `Mean income per return` `Mean income per person` Mean people…¹   <chr>    <int>                    <int>                    <int>         <dbl> 1 35004     2018                    58600                    28760          2.04 2 35005     2018                    41200                    21200          1.94 3 35006     2018                    53100                    25300          2.10 4 35007     2018                    62300                    29240          2.13 5 35010     2018                    52900                    25700          2.06 6 35014     2018                    50300                    25900          1.94 # … with abbreviated variable name ¹​`Mean people per return` concordance <- fst::fst(\"geo-processed/concordance/geo_concordance.fst\") names(concordance) [1] \"puma10\"           \"puma_weight\"      \"state\"            \"state_name\"        [5] \"state_postal\"     \"county10\"         \"cousubfp10\"       \"tract10\"           [9] \"bg10\"             \"zcta10\"           \"cbsa10\"           \"cbsatype10\"       [13] \"metdiv10\"         \"csa10\"            \"sldu10\"           \"sldl10\"           [17] \"sdbest10\"         \"sdbesttype10\"     \"sldu12\"           \"sldl12\"           [21] \"ur12\"             \"ua12\"             \"cbsa13\"           \"cbsatype13\"       [25] \"metdiv13\"         \"csa13\"            \"county14\"         \"cousubfp14\"       [29] \"sldu14\"           \"sldl14\"           \"sdbest14\"         \"sdbesttype14\"     [33] \"cbsa15\"           \"cbsatype15\"       \"metdiv15\"         \"csa15\"            [37] \"sldu16\"           \"sldl16\"           \"cd111\"            \"cd113\"            [41] \"cd114\"            \"cd115\"            \"cd116\"            \"region\"           [45] \"division\"         \"recs_domain\"      \"recs_division\"    \"recs_ba_zone\"     [49] \"recs_iecc_zone\"   \"climate_division\""},{"path":"https://ummel.github.io/fusionData/index.html","id":"prepare-fusion-inputs","dir":"","previous_headings":"","what":"Prepare fusion inputs","title":"Data backend for fusionACS platform","text":"donor survey successfully ingested harmonized, possible move final step: fusion! fusion process consists two parts. First, necessary “input” data files prepared. Second, inputs used generate final fusion “output”. fusionData v1.0, two steps helpfully wrapped fusionInput() fusionOutput() functions, respectively. functions safely execute steps required successful fusion. practice, users need call two high-level functions ensure resulting console output log files look good. worked example, let’s prepare required inputs fusion RECS 2015 ACS 2015 (test mode, course!). requires processed microdata surveys present local /fusionData installation. haven’t already, can download files using: also need install fusionModel package: Now let’s make call fusionInput(). function arguments fully documented ?fusionInput. run code interactive session, prompted console approve certain steps proceeding (, documented). console output designed informative describe done behind scenes. fusionInput() fusionOutput() can run “test mode” – fact, default behavior. test mode, result files saved within /fusion_ directory prevent conflict (overwrite) production data /fusion (underscore). fusionInput() returns path directory files saved. can confirm path used /fusion_ expected: Note path includes correct directory hierarchy. path ends “RECS/2015/2015/H/input” indicate directory question contains fusion input files associated RECS donor survey 2015, fusion ACS 2015, household-level. Now let’s see names files created fusionInput(): Every call fusionInput() generates four generic result files: *_inputlog.txt: copy extensive console output saw . *_prep.rds: Information variables used eventual fusion model. *_train.fst: Donor survey processed harmonized training microdata, ready fusion. *_predict.fst: Recipient ACS processed harmonized prediction microdata, ready fusion. usually necessary user run fusionInput() given donor survey, since process can flag issues variable harmonization need addressed finalizing fusion inputs.","code":"getSurveyProcessed(survey = \"RECS_2015\") getSurveyProcessed(survey = \"ACS_2015\") devtools::install_github(\"ummel/fusionModel\") input.dir <- fusionInput(donor = \"RECS_2015\",                          recipient = \"ACS_2015\",                          respondent = \"household\",                          fuse = c(\"btung\", \"btuel\", \"cooltype\"),                          force = c(\"moneypy\", \"householder_race\", \"education\", \"nhsldmem\", \"kownrent\", \"recs_division\"),                          note = \"Hello world. This is a worked example for the package README!\") 2023-03-30 16:39:06 MDT  R version 4.2.3 (2023-03-15)  Platform: x86_64-pc-linux-gnu  fusionData v1.0.0 fusionModel v2.2.2  fusionInput(donor = \"RECS_2015\", recipient = \"ACS_2015\", respondent = \"household\",      fuse = c(\"btung\", \"btuel\", \"cooltype\"), force = c(\"moneypy\",          \"householder_race\", \"education\", \"nhsldmem\", \"kownrent\",          \"recs_division\"), note = \"Hello world. This is a worked example for the package README!\",      test_mode = TRUE, ncores = getOption(\"fusionData.cores\"))  fusionInput() is running in TEST mode.  User-supplied note:  Hello world. This is a worked example for the package README!   Result files will be saved to:  /home/kevin/Documents/Projects/fusionData/fusion_/RECS/2015/2015/H/input   The local /input directory already exists.  |=== Check for custom pre-processing script ===|  None found.  |=== prepare() microdata ===|  Harmonizing RECS_2015 (donor) microdata at household level Harmonizing ACS_2015 (recipient) microdata at household level Identified 124 geographic intersections in the donor... Imputing PUMA for donor observations... Assigning location variables to recipient observations...  |=== assemble() microdata ===|  Identifying donor fusion variables... Including the following fusion variables:  btuel, btung, cooltype  Applying integer scaling to spatial predictor variables... Merging donor spatial predictor variables... Merging recipient spatial predictor variables... Assembling output data frames... Performing consistency checks...  |=== Check for custom .R scripts ===|  None found.  |=== Check categorical harmonized variables ===|  Similarity scores for 18 categorical harmonized variables: # A tibble: 18 × 2    `Harmonized variable`   `Similarity score`    <chr>                                <dbl>  1 numtablet__handheld                  0.676  2 employhh__wkhp                       0.727  3 occupyyrange__mv                     0.786  4 stoven__stov                         0.856  5 ngpay__gasfp                         0.868  6 hhsex__sex                           0.878  7 moneypy__hincp                       0.905  8 fuelheat__hfl                        0.929  9 householder_race__rac1p              0.933 10 internet__access                     0.933 11 education__schl                      0.945 12 elpay__elefp                         0.955 13 kownrent__ten                        0.983 14 numfrig__refr                        0.993 15 typehuq__bld                         0.993 16 yearmaderange__ybl                   0.996 17 desktop__laptop                      0.998 18 sdescent__hisp                       0.999 Retaining all categorical harmonized variables.  |=== Check location variables ===|  The representative location variable 'loc..recs_division' has 10 levels. The following location variables have been flagged for possible exclusion: # A tibble: 1 × 2   `Location variable` `Number of levels`   <chr>                            <int> 1 loc..recs_iecc_zone                 11 Retaining all location variables.  |=== Check fusion and predictor variables ===|  Identified 3 fusion variables (0 blocks): [1] \"btung\"    \"btuel\"    \"cooltype\"  Identified 24 harmonized variables and 240 total predictors  Identified 6 predictors to force and use for validation: [1] \"moneypy__hincp\"          \"householder_race__rac1p\" [3] \"education__schl\"         \"nhsldmem__np\"            [5] \"kownrent__ten\"           \"loc..recs_division\"       |=== Run fusionModel::prepXY() ===|  fusionModel v2.2.2 | https://github.com/ummel/fusionModel  Missing values imputed for the following 'x' variable(s):  acs.sf..b060, acs.sf..b080, nrel.urdb..rsed  Identifying 'x' that pass absolute Spearman correlation threshold Fitting full models for each 'y' Iteratively constructing preferred fusion order Retained 176 of 240 predictor variables Total processing time: 3.12 secs   Results of prepXY() saved to: RECS_2015_2015_H_prep.rds (0.00151 MB)   |=== Write training and prediction datasets to disk ===|  Writing training dataset... Training dataset saved to: RECS_2015_2015_H_train.fst (1.05 MB)   Writing prediction dataset... Prediction dataset saved to: RECS_2015_2015_H_predict.fst (1.76 MB)  Test mode: saved partial prediction data. Expected production file size is ~ 216 MB  |=== Upload /input files to Google Drive ===|   |=== fusionInput() is finished! ===|  fusionInput() total processing time: 33.6 secs   fusionInput() log file saved to:  /home/kevin/Documents/Projects/fusionData/fusion_/RECS/2015/2015/H/input/RECS_2015_2015_H_inputlog.txt input.dir [1] \"/home/kevin/Documents/Projects/fusionData/fusion_/RECS/2015/2015/H/input\" list.files(input.dir) [1] \"RECS_2015_2015_H_inputlog.txt\" \"RECS_2015_2015_H_predict.fst\"  [3] \"RECS_2015_2015_H_prep.rds\"     \"RECS_2015_2015_H_train.fst\""},{"path":"https://ummel.github.io/fusionData/index.html","id":"person-to-household-aggregation","dir":"","previous_headings":"Prepare fusion inputs","what":"Person-to-household aggregation","title":"Data backend for fusionACS platform","text":"donor refers survey household- person-level microdata respondent = \"household\" fuse includes person-level variables, situation person-level fusion variables need aggregated household-level prior fusion. example, variables ASEC 2019 microdata person level. fusing ACS 2019 data, variables need aggregated household level. done automatically within assemble. scenario, person-level fusion variables aggregated based class. default, numeric variables return household total (sum), unordered factors return level household’s reference person, ordered factors return household’s maximum level. one reason specifying variables ordered unordered factors important within ingestion process. default aggregation methods correct specific variable, can override one two ways: using agg_fun argument agg_adj argument. Lets look example using ASEC two variables person level: kidcneed, flags child age 14 needs paid childcare parents work, schllunch, value school lunch meals provided children free school. First, download processed microdata ASEC 2019 ACS 2019 surveys: {r, echo = TRUE} asec <- fst::read_fst(\"survey-processed/ASEC/2019/ASEC_2019_P_processed.fst\") head(select(asec, asec_2019_hid, weight, rep_1, schllunch, kidcneed)) default, schllunch summed across household members (numeric) kidcneed take reference person’s value (unordered factor). However, (somewhat confusingly) person-level data, ASEC records schllunch members family. Summing schllunch across household members result double counting total school lunch value household, even multiple families household. problem occurs many ASEC variables related poverty family-level response recorded individual family. default behavior kidcneed value reference person. reference person householder, never child age 14, result aggregated variable always “universe”. Instead, want take modal value across members household. ignore NIU values 1 majority children need paid child care, 0 . Let’s implement two custom adjustments aggregation process within fusionInput(). ```{r, echo = TRUE} input.dir <- fusionInput(donor = “ASEC_2019”, recipient = “ACS_2019”, respondent = “household”, # variables always want predictors: force = c(“hhincome”, “race”, “educ”, “numprec”, “hhtenure”, “state”), # two person-level variables want aggregate fuse fuse = c(“kidcneed”, “schllunch”), # provide list specific custom functions aggregation agg_adj = list( schllunch = ~.else(duplicated(data.table(asec_2019_hid, famid)), 0, schllunch) ), # provide list specific pre-packaged functions aggregation (still override defaults) agg_fun = list( kidcneed = “mode” ), note = “ASEC example custom aggregation”) , let’s check location result files names: Every call fusionOutput() generates three generic result files: *_outputlog.txt: copy extensive console output . *_model.fsn: fusionModel object used simulate fusion variables. *_fused.fsd: recipient microdata simulated values fusion variables, across multiple implicates. addition, running test mode, two additional files produced: *_valid.fsd: training microdata simulated values fusion variables, across multiple implicates. *_validation.rds: Results internal validation exercises using simulated variables *_valid.fsd. Just confirm, let’s look final, fused microdata “RECS_2015_2015_H_fused.fsd”. running test mode, ACS prediction dataset restricted first 10,000 rows , default, two implicates simulated (speed file size). quick(er) way check obvious issues problems. good idea make sure fusionInput() fusionOutput() “passing” start--finish test mode trying final (time-consuming) fusion. practice, sometimes need “fusion” secure server environment. Since installing complete fusionData package just access fusionOutput() overkill (pain), copy fusionOutput() silently exported fusionModel package. allows someone install load fusionModel package server environment use fusionOutput() fusion step – assuming server access necessary input files.","code":"getSurveyProcessed(survey = \"ACS_2019\") getSurveyProcessed(survey = \"ACES_2019\") For `kidcneed` the custom aggregation uses a package-specific function called \"mode\", which returns to modal value across household members. Any other function that takes in a vector and returns a single value can be passed to the `agg_fun` argument.  For `schllunch` the aggregation is more specific. We want to take the value of the first person within the *family*. This is different to reference person (which we could otherwise get with the package-specific function \"ref\" passed to `agg_fun`) because there could be multiple families within a household. Because it is not an existing function, it needs to be passed to `agg_adj`.  Note that in the `schllunch` custom aggregation function, we use the convenience utility function `if.else()`. It wraps [`if_else`](https://dplyr.tidyverse.org/reference/if_else.html) and can be used identically but preserves factor levels and ordering in the result if possible.  The results files for this call to `fusionInput()` will now be at the *household* level, and the person level variables will be aggregated as we specified.   ## Generate fusion outputs  Once the necessary input files are ready-to-go, it is straightforward to complete the fusion process using `fusionOutput()`. The function arguments are fully documented in `?fusionOutput`. A minimal call simply indicates where to find the required input files. Everything else is handled automatically:  ``` r output.dir <- fusionOutput(input = input.dir) 2023-03-30 17:05:37 MDT  R version 4.2.3 (2023-03-15)  Platform: x86_64-pc-linux-gnu  fusionData v1.0.0 fusionModel v2.2.2  fusionOutput(input = input.dir, output = NULL, M = NULL, note = NULL,      test_mode = TRUE, upload = FALSE, ncores = getOption(\"fusionData.cores\"),      margin = 2, ... = )  fusionOutput() is running in TEST mode.  The input files directory is:  /home/kevin/Documents/Projects/fusionData/fusion_/RECS/2015/2015/H/input   Result files will be saved to:  /home/kevin/Documents/Projects/fusionData/fusion_/RECS/2015/2015/H/output   The local /output directory already exists.  |=== Load training data inputs ===|  Loading training microdata: RECS_2015_2015_H_train.fst  Loading prepXY() results: RECS_2015_2015_H_prep.rds   |=== Run fusionModel::train() ===|  Running in 'test' mode using fast(er) hyper-parameter settings: $boosting [1] \"goss\"  $num_leaves [1] 8  $min_data_in_leaf [1] 57  $num_iterations [1] 50  $bagging_fraction [1] 1  $feature_fraction [1] 0.3  $learning_rate [1] 0.2  $max_depth [1] 3  $max_bin [1] 16  $min_data_in_bin [1] 57  $max_cat_threshold [1] 8  Training fusion model  fusionModel v2.2.2 | https://github.com/ummel/fusionModel  Missing values imputed for the following 'x' variable(s):  acs.sf..b060, acs.sf..b080, nrel.urdb..rsed  3 fusion variables 176 initial predictor variables 5686 observations Using specified set of predictors for each fusion variable Using OpenMP multithreading within LightGBM (3 cores) Training step 1 of 3: btung -- R-squared of cluster means: 0.972  -- Number of neighbors in each cluster:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.     10.0    38.0   122.5   188.1   343.0   497.0  Training step 2 of 3: cooltype Training step 3 of 3: btuel -- R-squared of cluster means: 0.963  -- Number of neighbors in each cluster:    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.     10.0    34.0    82.0   146.1   229.0   494.0  Fusion model saved to:  /home/kevin/Documents/Projects/fusionData/fusion_/RECS/2015/2015/H/output/RECS_2015_2015_H_model.fsn  Total processing time: 5.58 secs   |=== Fuse onto training data for internal validation ===|  Running in 'test' mode, so internal validation skipped.  |=== Fuse onto prediction data ===|  Loading prediction microdata: RECS_2015_2015_H_predict.fst   Fusing to ACS microdata (2 implicates) 3 fusion variables 176 initial predictor variables 10000 observations Missing values imputed for the following variable(s):  acs.sf..b060, acs.sf..b080, nrel.urdb..rsed  Generating 2 implicates  Using OpenMP multithreading within LightGBM (3 cores) Fusion step 1 of 3: btung -- Predicting LightGBM models -- Simulating fused values Fusion step 2 of 3: cooltype -- Predicting LightGBM models -- Simulating fused values Fusion step 3 of 3: btuel -- Predicting LightGBM models -- Simulating fused values Writing fusion output to .fsd file  Fusion results saved to:  /home/kevin/Documents/Projects/fusionData/fusion_/RECS/2015/2015/H/output/RECS_2015_2015_H_fused.fsd  Total processing time: 0.78 secs   |=== Upload /output files to Google Drive ===|  'upload = FALSE'; file upload skipped at request of user.  |=== fusionOutput() is finished! ===|  fusionOutput() total processing time: 6.4 secs   fusionOutput() log file saved to:  /home/kevin/Documents/Projects/fusionData/fusion_/RECS/2015/2015/H/output/RECS_2015_2015_H_outputlog.txt output.dir [1] \"/home/kevin/Documents/Projects/fusionData/fusion_/RECS/2015/2015/H/output\" list.files(output.dir) [1] \"RECS_2015_2015_H_fused.fsd\"     \"RECS_2015_2015_H_model.fsn\"     [3] \"RECS_2015_2015_H_outputlog.txt\" fsd.file <- list.files(output.dir, full.names = TRUE)[1] fused <- fusionModel::read_fsd(fsd.file) fusionModel v2.2.2 | https://github.com/ummel/fusionModel dim(fused) [1] 20000     4 table(fused$M) 1     2  10000 10000 head(fused) M  btung                                 cooltype btuel 1: 1 139800          Central air conditioning system 48500 2: 1      0          Central air conditioning system 72300 3: 1  37900 Individual window/wall or portable units 45000 4: 1      0          Central air conditioning system 57900 5: 1 103600          Central air conditioning system 29900 6: 1  30000          Central air conditioning system  7740"},{"path":"https://ummel.github.io/fusionData/reference/assemble.html","id":null,"dir":"Reference","previous_headings":"","what":"Assemble data used for survey fusion — assemble","title":"Assemble data used for survey fusion — assemble","text":"Assembles data inputs pass train fuse perform survey fusion. Adds fusion, replicate weight, /spatial variables checks donor recipient output data frames consistent.","code":""},{"path":"https://ummel.github.io/fusionData/reference/assemble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assemble data used for survey fusion — assemble","text":"","code":"assemble(   x,   fusion.variables = NULL,   spatial.datasets = \"all\",   window = 2,   pca = NULL,   replicates = FALSE,   agg_fun = NULL,   agg_adj = NULL )"},{"path":"https://ummel.github.io/fusionData/reference/assemble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assemble data used for survey fusion — assemble","text":"x List object produced prepare. fusion.variables Character. Names donor variables included output fusion candidates. NULL (default), attempt made return donor variables used predictor harmonization process. spatial.datasets Character. Vector requested spatial datasets merge (e.g. \"EPA-SLD\") either two special values: \"\" (default) \"none\". window Integer. Size allowable temporal window, years, merging spatial variables. window = 0 (default) means spatial variable included vintage survey. See Details. pca Numeric. Controls whether/PCA used reduce dimensionality spatial variables. Default (NULL) PCA. non-NULL, numeric vector length two; e.g. pca = c(50, 0.95). First number maximum number components return; second number target proportion variance explained. See Details. replicates Logical. replicate observation weights included, available? Defaults FALSE. agg_fun List. See fusionInput. agg_adj List. See fusionInput.","code":""},{"path":"https://ummel.github.io/fusionData/reference/assemble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assemble data used for survey fusion — assemble","text":"list length two containing donor recipient microdata pass train fuse.","code":""},{"path":"https://ummel.github.io/fusionData/reference/assemble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assemble data used for survey fusion — assemble","text":"Spatial variables included associated vintage within +/- window years survey vintage. cases spatial variable multiple vintages equidistant survey vintage, older vintage selected. Variables vintage = \"always\" , course, always included. PCA restricted numeric spatial variables computed using prcomp. returned number principal components lesser pca[1] number components explain least pca[2] proportion variance. example, pca = c(50, 0.95) select fewest number components explain 95% variance, 50 components maximum. NA's numeric spatial variables imputed using median value prior computing principal components.","code":""},{"path":"https://ummel.github.io/fusionData/reference/assemble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assemble data used for survey fusion — assemble","text":"","code":"prep <- prepare(donor = \"RECS_2015\",                 recipient = \"ACS_2015\",                 respondent = \"household\",                 implicates = 3)  data <- assemble(x = prep)"},{"path":"https://ummel.github.io/fusionData/reference/bg_centroids.html","id":null,"dir":"Reference","previous_headings":"","what":"Block group centroids circa 2010 — bg_centroids","title":"Block group centroids circa 2010 — bg_centroids","text":"Population-weighted block group centroids. sf points object. Useful assigning coordinate-based spatial features block groups create geographic concordance; e.g. using st_nearest_feature.","code":""},{"path":"https://ummel.github.io/fusionData/reference/bg_centroids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Block group centroids circa 2010 — bg_centroids","text":"","code":"bg_centroids"},{"path":"https://ummel.github.io/fusionData/reference/bg_centroids.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Block group centroids circa 2010 — bg_centroids","text":"sf spatial data frame. state State code county10 County code tract10 Tract code bg10 Block group code geometry Centroid coordinates `sfc_POINT` class","code":""},{"path":"https://ummel.github.io/fusionData/reference/bg_centroids.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Block group centroids circa 2010 — bg_centroids","text":"https://www2.census.gov/geo/docs/reference/cenpop2010/blkgrp/","code":""},{"path":"https://ummel.github.io/fusionData/reference/compileDictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile universal survey dictionary — compileDictionary","title":"Compile universal survey dictionary — compileDictionary","text":"Compiles individual survey data dictionaries /survey-processed two tibbles saved disk use fusionData package well universe harmony Shiny apps.","code":""},{"path":"https://ummel.github.io/fusionData/reference/compileDictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile universal survey dictionary — compileDictionary","text":"","code":"compileDictionary()"},{"path":"https://ummel.github.io/fusionData/reference/compileDictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile universal survey dictionary — compileDictionary","text":"Saves dictionary.rda surveys.rda data frames disk /data, /universe/www, /harmony/www.","code":""},{"path":"https://ummel.github.io/fusionData/reference/compileDictionary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile universal survey dictionary — compileDictionary","text":"","code":"compileDictionary()"},{"path":"https://ummel.github.io/fusionData/reference/compileSpatial.html","id":null,"dir":"Reference","previous_headings":"","what":"Compile all spatial predictor variables — compileSpatial","title":"Compile all spatial predictor variables — compileSpatial","text":"Detects compiles processed spatial datasets located /geo-processed single geo_predictors.fst file utilized assemble.","code":""},{"path":"https://ummel.github.io/fusionData/reference/compileSpatial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compile all spatial predictor variables — compileSpatial","text":"","code":"compileSpatial()"},{"path":"https://ummel.github.io/fusionData/reference/compileSpatial.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compile all spatial predictor variables — compileSpatial","text":"Saves /geo-processed/geo_predictors.fst disk.","code":""},{"path":"https://ummel.github.io/fusionData/reference/compileSpatial.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compile all spatial predictor variables — compileSpatial","text":"","code":"compileSpatial()"},{"path":"https://ummel.github.io/fusionData/reference/conveyHarmony.html","id":null,"dir":"Reference","previous_headings":"","what":"Convey an existing harmony file to new survey(s) — conveyHarmony","title":"Convey an existing harmony file to new survey(s) — conveyHarmony","text":"Attempts convey harmonies existing harmony file new harmony file different survey(s). useful introducing new vintage existing survey, already-specified harmonies may valid new vintage.","code":""},{"path":"https://ummel.github.io/fusionData/reference/conveyHarmony.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convey an existing harmony file to new survey(s) — conveyHarmony","text":"","code":"conveyHarmony(from, to, overwrite = FALSE)"},{"path":"https://ummel.github.io/fusionData/reference/conveyHarmony.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convey an existing harmony file to new survey(s) — conveyHarmony","text":"Character. Name .R harmony file existing harmonies interest (e.g. \"RECS_2015__ACS_2019.R\") Character. Name desired new harmony file (e.g. \"RECS_2015__ACS_2015.R\"). overwrite Logical. already exists, overwritten? Default FALSE.","code":""},{"path":"https://ummel.github.io/fusionData/reference/conveyHarmony.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convey an existing harmony file to new survey(s) — conveyHarmony","text":"harmony file written disk (/harmony/harmonies), valid harmonies detected. list object retained harmonies written disk using internal function harmony/R/harmony2dotR.R. Possible message printed console indicating harmonies strictly valid explored manually via harmony app.","code":""},{"path":"https://ummel.github.io/fusionData/reference/conveyHarmony.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convey an existing harmony file to new survey(s) — conveyHarmony","text":"harmony considered valid , must match exactly variable names factor levels (present). User always manually check .R file using analysis!","code":""},{"path":"https://ummel.github.io/fusionData/reference/conveyHarmony.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convey an existing harmony file to new survey(s) — conveyHarmony","text":"","code":"conveyHarmony(from = \"RECS_2015__ACS_2019.R\", to = \"RECS_2015__ACS_2015.R\")"},{"path":"https://ummel.github.io/fusionData/reference/createDictionary.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate data dictionary from survey microdata — createDictionary","title":"Generate data dictionary from survey microdata — createDictionary","text":"Produces data dictionary standard structure can saved alongside processed microdata. Resulting dictionary can compiled survey dictionaries via compileDictionary. function typically called end .R script generates processed survey microdata.","code":""},{"path":"https://ummel.github.io/fusionData/reference/createDictionary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate data dictionary from survey microdata — createDictionary","text":"","code":"createDictionary(data, survey, vintage, respondent)"},{"path":"https://ummel.github.io/fusionData/reference/createDictionary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate data dictionary from survey microdata — createDictionary","text":"data Data frame. Survey microdata variable descriptions stored columns via var_label. survey Character. Unique survey identifier (e.g. \"RECS\"). vintage Character. Survey vintage (e.g. 2015). respondent Character. Respondent type; either \"Household\" \"Person\" string identifiable .","code":""},{"path":"https://ummel.github.io/fusionData/reference/createDictionary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate data dictionary from survey microdata — createDictionary","text":"Returns tibble standard \"dictionary\" information based provided microdata.","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionData-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fusionData: Data backend for fusionACS platform — fusionData-package","title":"fusionData: Data backend for fusionACS platform — fusionData-package","text":"Pre-process raw survey spatial data. Harmonize variables across surveys. Build harmonized microdata use fusionModel package.","code":""},{"path":[]},{"path":"https://ummel.github.io/fusionData/reference/fusionData-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fusionData: Data backend for fusionACS platform — fusionData-package","text":"Maintainer: Kevin Ummel ummel@berkeley.edu contributors: Karthik Akkiraju [contributor] Hero Ashman [contributor] Cora Kingdon [contributor] Miguel Poblete Cazenave [contributor] Steven Herrera Tenorio [contributor]","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate input files needed for fusion — fusionInput","title":"Generate input files needed for fusion — fusionInput","text":"Handles operations needed generate /input files successfully ingested harmonized donor survey microdata. Optionally uploads resulting local /input data files correct location remote storage (via uploadFiles). NOTE: Argument test_mode = TRUE default, causes local \"/fusion_\" sub-directory used (creating necessary). prevents overwrite production data \"/fusion\" (underscore) test mode.","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate input files needed for fusion — fusionInput","text":"","code":"fusionInput(   donor,   recipient,   respondent,   fuse = NULL,   force = NULL,   note = NULL,   agg_fun = NULL,   agg_adj = NULL,   test_mode = TRUE,   ncores = getOption(\"fusionData.cores\") )"},{"path":"https://ummel.github.io/fusionData/reference/fusionInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate input files needed for fusion — fusionInput","text":"donor Character. Donor survey identifier (e.g. \"RECS_2015\"). recipient Character. Recipient (ACS) survey identifier (e.g. \"ACS_2015\"). respondent Character. Desired respondent level microdata. Either \"household\" \"person\". fuse Character list. Names donor variables fused recipient. fuse list, entry character vector possibly indicating multiple variables fuse block. order fuse variables matter, since prepXY used internally determine plausible fusion sequence. NULL (default), attempt made return donor variables used predictor harmonization process (preferable specify explicitly, though). force Character. Pre-specified subset potential predictor variables \"force\" included predictors. variables also used within fusionOutput create validation subsets. generally select variables best reflect following socioeconomic geographic concepts: income; race/ethnicity; education; household size; housing tenure; highest-resolution location variable donor survey thought representative. note Character. Optional note supplied user. Inserted log file reference. agg_fun List. Optional override default aggregation function person-level fuse variables respondent = \"household\". Passed assemble internally. See Details. agg_adj List. Optional pre-aggregation adjustment code apply person-level fuse variables respondent = \"household\". Passed assemble internally. See Details. test_mode Logical. TRUE (default), function uses local \"/fusion_\" sub-directory (creating necessary). test_mode = FALSE possible overwrite production data \"/fusion\" (underscore). ncores Integer. Number physical CPU cores used parallel computation.","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate input files needed for fusion — fusionInput","text":"Invisibly returns path local directory files saved. Messages printed console noting progress. Resulting /input data files saved appropriate local directory (optionally) remote Google Drive storage. Also saves .txt log file alongside data files records console output fusionInput.","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionInput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate input files needed for fusion — fusionInput","text":"function checks arguments determines file path appropriate /input directory (creating necessary), based donor, recipient, respondent, test_mode. executes following steps: Check custom pre-processing script. Looks optional, pre-existing .R script /input starting \"(00)\". script can used inject custom code prior operations. likely, custom code used set modify function arguments specified manually function call. found, .R file source-d locally code comments printed console. prepare() microdata. prepare called sensible default values. assemble() microdata. assemble called sensible default values. Output assemble consists object named data harmonized donor microdata data[[1]] harmonized ACS microdata data[[2]]. Check custom .R scripts. Looks optional, pre-existing .R scripts /input starting \"(01)\", \"(02)\", etc. scripts can used inject custom code prior next step. likely, custom code used add remove non-standard variables data otherwise adjust default harmonized microdata. custom code must modify fuse vector (list) changes initial function argument desired. found, .R files source-d locally code comments printed console. Check categorical harmonized variables. Computes similarity donor ACS categorical harmonized variables comparing proportions observable factor levels. assumption donor ACS sample underlying population, expect proportions fairly similar. Returns \"Similarity score\" categorical harmonized variable, ranging 0 1. Variables scores ~0.8 probably checked analyst (via harmony) confirm harmonization strategy valid. User prompted console indicate variables ignored/dropped/removed, . Check location variables. Checks number factor levels location predictor variable compares number levels \"representative\" location variable passed via force. location variable levels representative one, flagged potential issue since suggests presence location variable greater spatial resolution one known representative. User prompted console indicate like remove flagged variable(s). Check fusion predictor variables. full set fusion potential predictor variables determined. Summary information printed console. User prompted console confirm everything looks OK proceeding. Run fusionModel::prepXY(). prepXY called sensible default values. output written appropriate /input directory noted console. prepXY argument fraction automatically set use 10% donor observations 50k rows (10k test mode), whichever higher. Sampling often minimal effect results speeds computation. Write training prediction datasets disk. (donor) training (ACS) prediction datasets written appropriate /input directory fully-compressed fst files. Output file names noted console. test mode, 10k rows written disk (speed). case, expected production file size printed console. Upload /input files Google Drive. User prompted console confirm like upload resulting /input data files analogous location remote Google Drive storage. fusionInput() finished! Upon completion, log file named \"inputlog.txt\" written /input reference. user prompted console input (including asking GDrive upload) interactive TRUE. Otherwise, steps proceed without user input. donor refers survey household- person-level microdata respondent = \"household\" fuse includes person-level variables, situation person-level fusion variables need aggregated household-level prior fusion. done automatically within assemble. scenario, person-level fusion variables aggregated based class. default, numeric variables return household total (sum), unordered factors return level household's reference person, ordered factors return household's maximum level. agg_fun argument can used override default aggregation function specific fusion variables. can reference function takes vector returns single value includes 'na.rm' argument. Two special, package-specific functions also available, \"ref\" \"mode\", return reference person value modal value, respectively. functions comparatively slow, especially \"mode\". See Examples. agg_adj argument can used adjust/modify person-level fusion variable prior aggregation. may necessary variable defined measured way doe allow straightforward aggregation household level. agg_adj supplies named formulas internal mutate call, allowing complex modifications. See Examples. Note Examples use convenience utility function .else(). wraps if_else can used identically preserves factor levels ordering result possible.","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionInput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate input files needed for fusion — fusionInput","text":"","code":"# Since 'test_mode = TRUE' by default, this will affect files in local /fusion_ directory dir <- fusionInput(donor = \"RECS_2015\",                    recipient = \"ACS_2015\",                    respondent = \"household\",                    fuse = c(\"btung\", \"btuel\", \"cooltype\"),                    force = c(\"moneypy\", \"householder_race\", \"education\", \"nhsldmem\", \"kownrent\", \"recs_division\"),                    note = \"Hello world. Reminder: running in test mode by default.\")  # List files in the /input directory list.files(dir)  # Complicated ASEC example using custom aggregation arguments dir <- fusionInput(donor = \"ASEC_2019\",                    recipient = \"ACS_2019\",                    respondent = \"household\",                    fuse = c(\"heatsub\", \"heatval\", \"kidcneed\", \"hipval\", \"spmwic\", \"spmmort\"),                    agg_adj = list(                       hipval = ~if.else(duplicated(asec_2019_hid), 0, hipval),                       kidcneed = ~if.else(kidcneed == \"NIU: Over 14\", \"No\", kidcneed),                       spmwic = ~if.else(duplicated(data.table(asec_2019_hid, spmfamunit)), 0, spmwic)                    ),                    agg_fun = list(                       spmwic = \"mean\",                       kidcneed = \"mode\"                    ))"},{"path":"https://ummel.github.io/fusionData/reference/fusionOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate output files resulting from fusion — fusionOutput","title":"Generate output files resulting from fusion — fusionOutput","text":"Handles operations needed \"fusion\" using input files generated successful call fusionInput. Trains fusion model, generates internal validation results, simulates multiple implicates recipient microdata.","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate output files resulting from fusion — fusionOutput","text":"","code":"fusionOutput(   input,   output = NULL,   M = NULL,   note = NULL,   test_mode = TRUE,   validation = !test_mode,   ncores = getOption(\"fusionData.cores\"),   margin = 2,   ... )"},{"path":"https://ummel.github.io/fusionData/reference/fusionOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate output files resulting from fusion — fusionOutput","text":"input Character. Path directory containing files created fusionInput. output Character. Optional path directory output files saved. output = NULL (default), output directory automatically constructed input. M Integer. Desired number fusion implicates. M = NULL (default) internally set 40 , test_mode = TRUE, 2 implicates. note Character. Optional note supplied user. Inserted log file reference. test_mode Logical. test_mode = TRUE (default), result files always saved within \"/fusion_\" directory output (possibly created); faster hyperparameters used train; internal validation step skipped default. validation Logical integer. Controls execution internal validation (Steps 3 4). validation = 0 FALSE, neither step performed (default test_mode = TRUE). 1, Step 3. 2 TRUE, Steps 3 4. ncores Integer. Number physical CPU cores used parallel computation. margin Numeric. Passed argument fuse. ... Optional, non-default arguments passed train. example, fork = TRUE enable forked parallel processing.","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionOutput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate output files resulting from fusion — fusionOutput","text":"Saves resulting output data files appropriate local directory. Also saves .txt log file alongside data files records console output fusionOutput.","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionOutput.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate output files resulting from fusion — fusionOutput","text":"function checks arguments determines file path appropriate output directory (creating necessary). output files always placed within appropriate directory hierarchy, based donor recipient information detected input file names. practice, output need specified working environment output files need located somewhere different input files. function executes following steps: Load training data inputs. Loads donor training microdata results prepXY. Run fusionModel::train(). Calls train using sensible defaults hyperparameters. test_mode = TRUE, hyperparameters designed fast/rough--ready model training. Fuse onto training data internal validation. Optional step (see validation argument). Fuses multiple implicates original donor training data using fuse. Results saved disk. Run fusionModel::validate(). Optional step (see validation argument). Passes previous step's results validate. Results saved disk. Fuse onto prediction data. Fuses multiple implicates supplied input prediction data using fuse. Results saved disk. fusionOutput() finished! Upon completion, log file named \"outputlog.txt\" written output reference.","code":""},{"path":"https://ummel.github.io/fusionData/reference/fusionOutput.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate output files resulting from fusion — fusionOutput","text":"","code":"# Since 'test_mode = TRUE' by default, this will affect files in local '/fusion_' directory dir <- fusionInput(donor = \"RECS_2015\",                    recipient = \"ACS_2015\",                    respondent = \"household\",                    fuse = c(\"btung\", \"btuel\", \"cooltype\"),                    force = c(\"moneypy\", \"householder_race\", \"education\", \"nhsldmem\", \"kownrent\", \"recs_division\"),                    note = \"Hello world. Reminder: running in test mode by default.\")  # List files in the /input directory list.files(dir)  # Using default settings out <- fusionOutput(input = dir) list.files(out)"},{"path":"https://ummel.github.io/fusionData/reference/getGeoProcessed.html","id":null,"dir":"Reference","previous_headings":"","what":"Download processed spatial data — getGeoProcessed","title":"Download processed spatial data — getGeoProcessed","text":"Since processed spatial data files generally large upload Github attach fusionData package, stored Google Drive. function downloads requested processed geographic data places appropriate local sub-directory /fusionData/geo_processed. full file path (e.g. intermediate directories) created, necessary, existing data disk altered deleted.","code":""},{"path":"https://ummel.github.io/fusionData/reference/getGeoProcessed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download processed spatial data — getGeoProcessed","text":"","code":"getGeoProcessed(dataset = \"essential\")"},{"path":"https://ummel.github.io/fusionData/reference/getGeoProcessed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download processed spatial data — getGeoProcessed","text":"dataset Character. Indicate spatial dataset(s) download. dataset = \"essential\", files necessary call prepare assemble downloaded. dataset = \"\", processed spatial data files downloaded. Otherwise, single spatial dataset identifier (e.g. \"EPA-SLD\") download associated \"*_processed.rds\" files.","code":""},{"path":"https://ummel.github.io/fusionData/reference/getGeoProcessed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download processed spatial data — getGeoProcessed","text":"drive_download prints messages console indicating files downloaded.","code":""},{"path":"https://ummel.github.io/fusionData/reference/getGeoProcessed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download processed spatial data — getGeoProcessed","text":"Files automatically placed appropriate sub-directory fusionData/geo_processed. dataset = \"essential\", downloaded files : \"geo_predictors.fst\" \"concordance/geo_concordance.fst\".","code":""},{"path":"https://ummel.github.io/fusionData/reference/getGeoProcessed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download processed spatial data — getGeoProcessed","text":"","code":"getGeoProcessed(dataset = \"essential\")"},{"path":"https://ummel.github.io/fusionData/reference/getSurveyProcessed.html","id":null,"dir":"Reference","previous_headings":"","what":"Download processed survey microdata — getSurveyProcessed","title":"Download processed survey microdata — getSurveyProcessed","text":"Since processed survey microdata files generally large upload Github attach fusionData package, processed microdata (.fst) files stored Google Drive. function downloads requested survey microdata places appropriate local sub-directory /fusionData/survey-processed. full file path (e.g. intermediate directories) created, necessary, existing data disk altered deleted.","code":""},{"path":"https://ummel.github.io/fusionData/reference/getSurveyProcessed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Download processed survey microdata — getSurveyProcessed","text":"","code":"getSurveyProcessed(survey)"},{"path":"https://ummel.github.io/fusionData/reference/getSurveyProcessed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Download processed survey microdata — getSurveyProcessed","text":"survey Character. Survey identifier, possibly including vintage respondent type. See Details.","code":""},{"path":"https://ummel.github.io/fusionData/reference/getSurveyProcessed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Download processed survey microdata — getSurveyProcessed","text":"drive_download prints messages console indicating files downloaded.","code":""},{"path":"https://ummel.github.io/fusionData/reference/getSurveyProcessed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Download processed survey microdata — getSurveyProcessed","text":"survey must include unique survey identifier. just identifier provided (e.g. survey = \"RECS\"), available processed microdata across vintages respondents downloaded. Alternatively, can specify survey vintage (e.g. survey = \"RECS_2015\") include additional respondent code (e.g. survey = \"RECS_2015_H\") limit download restrictive subsets. special argument survey = \"\" download available processed microdata across surveys.","code":""},{"path":"https://ummel.github.io/fusionData/reference/getSurveyProcessed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Download processed survey microdata — getSurveyProcessed","text":"","code":"getSurveyProcessed(survey = \"RECS_2015_H\")"},{"path":"https://ummel.github.io/fusionData/reference/harmonize.html","id":null,"dir":"Reference","previous_headings":"","what":"Create harmonized microdata — harmonize","title":"Create harmonized microdata — harmonize","text":"Parses specified .R \"harmony file\" produced Survey Harmonization Tool harmony produce associated microdata available harmonized variables. function called within prepare likely never needs called user directly.","code":""},{"path":"https://ummel.github.io/fusionData/reference/harmonize.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create harmonized microdata — harmonize","text":"","code":"harmonize(   harmony.file,   respondent,   output = \"both\",   ncores = getOption(\"fusionData.cores\") )"},{"path":"https://ummel.github.io/fusionData/reference/harmonize.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create harmonized microdata — harmonize","text":"harmony.file Character. Name .R harmony file located /harmony/harmonies. respondent Character. output microdata \"household\" \"person\" level? output Character. Can \"\", \"donor\", \"recipient\", indicating microdata return. ncores Integer. Number physical CPU cores used parallel computation.","code":""},{"path":"https://ummel.github.io/fusionData/reference/harmonize.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create harmonized microdata — harmonize","text":"output = \"\", list length 2 containing donor recipient data frames. Otherwise, single data frame.","code":""},{"path":"https://ummel.github.io/fusionData/reference/harmonize.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create harmonized microdata — harmonize","text":"","code":"test <- harmonize(harmony.file = \"CEI_2015-2019__ACS_2015.R\", respondent = \"household\")"},{"path":"https://ummel.github.io/fusionData/reference/harmony.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the fusionACS Survey Harmonization Tool — harmony","title":"Open the fusionACS Survey Harmonization Tool — harmony","text":"Opens 'harmony' Shiny app (/harmony); .e. fusionACS Survey Harmonization Tool.","code":""},{"path":"https://ummel.github.io/fusionData/reference/harmony.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the fusionACS Survey Harmonization Tool — harmony","text":"","code":"harmony()"},{"path":"https://ummel.github.io/fusionData/reference/harmony.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open the fusionACS Survey Harmonization Tool — harmony","text":"Opens app new browser window. R session occupied window open.","code":""},{"path":"https://ummel.github.io/fusionData/reference/harmony.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open the fusionACS Survey Harmonization Tool — harmony","text":"","code":"harmony()"},{"path":"https://ummel.github.io/fusionData/reference/installPackage.html","id":null,"dir":"Reference","previous_headings":"","what":"Install fusionData package locally — installPackage","title":"Install fusionData package locally — installPackage","text":"Safe convenient way (re-)install fusionData package locally. Compiles local survey dictionary files (compileDictionary); updates package documentation namespace (roxygenise); (re-)installs package locally (install). Missing package dependencies installed default; user asked console wish upgrade already-installed dependencies.","code":""},{"path":"https://ummel.github.io/fusionData/reference/installPackage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install fusionData package locally — installPackage","text":"","code":"installPackage()"},{"path":"https://ummel.github.io/fusionData/reference/installPackage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install fusionData package locally — installPackage","text":"","code":"installPackage()"},{"path":"https://ummel.github.io/fusionData/reference/prepare.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare microdata inputs for assembly — prepare","title":"Prepare microdata inputs for assembly — prepare","text":"Prepares data inputs pass assemble. Harmonizes common variables specified donor recipient surveys, imputes PUMA donor records, samples location variables recipient records.","code":""},{"path":"https://ummel.github.io/fusionData/reference/prepare.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare microdata inputs for assembly — prepare","text":"","code":"prepare(   donor,   recipient,   respondent,   implicates = 1,   collapse = FALSE,   ncores = getOption(\"fusionData.cores\") )"},{"path":"https://ummel.github.io/fusionData/reference/prepare.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare microdata inputs for assembly — prepare","text":"donor Character. Donor survey identifier (e.g. \"RECS_2015\"). recipient Character. Recipient (ACS) survey identifier (e.g. \"ACS_2015\"). respondent Character. Desired respondent level microdata. Either \"household\" \"person\". implicates Integer. Number PUMA implicates return donor microdata. collapse Logical. rows collapsed weighting factors aggregated multiple imputations household-PUMA? ncores Integer. Number physical CPU cores used parallel computation.","code":""},{"path":"https://ummel.github.io/fusionData/reference/prepare.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare microdata inputs for assembly — prepare","text":"list length two containing output data frames specific donor recipient output, respectfully. Can passed assemble.","code":""},{"path":"https://ummel.github.io/fusionData/reference/prepare.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare microdata inputs for assembly — prepare","text":"","code":"prep <- prepare(donor = \"RECS_2015\",                 recipient = \"ACS_2015\",                 respondent = \"household\",                 implicates = 3)"},{"path":"https://ummel.github.io/fusionData/reference/universe.html","id":null,"dir":"Reference","previous_headings":"","what":"Open the fusionACS Universal Survey Dictionary — universe","title":"Open the fusionACS Universal Survey Dictionary — universe","text":"Opens 'universe' Shiny app (/universe); .e. fusionACS Universal Survey Dictionary.","code":""},{"path":"https://ummel.github.io/fusionData/reference/universe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open the fusionACS Universal Survey Dictionary — universe","text":"","code":"universe()"},{"path":"https://ummel.github.io/fusionData/reference/universe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open the fusionACS Universal Survey Dictionary — universe","text":"Opens app new browser window. R session occupied window open.","code":""},{"path":"https://ummel.github.io/fusionData/reference/universe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Open the fusionACS Universal Survey Dictionary — universe","text":"","code":"universe()"},{"path":"https://ummel.github.io/fusionData/reference/uploadFiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Upload local fusionData files to remote Google Drive storage — uploadFiles","title":"Upload local fusionData files to remote Google Drive storage — uploadFiles","text":"Convenient safe wrapper around googledrive functions upload local file(s) /fusionData analogous location /fusionData directory \"fusionACSdata\" Google Drive account.","code":""},{"path":"https://ummel.github.io/fusionData/reference/uploadFiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Upload local fusionData files to remote Google Drive storage — uploadFiles","text":"","code":"uploadFiles(files, ask = TRUE)"},{"path":"https://ummel.github.io/fusionData/reference/uploadFiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Upload local fusionData files to remote Google Drive storage — uploadFiles","text":"files Character. Local file path(s) uploaded. Must within local /fusionData directory. ask Logical. user prompted confirm upload decision console? Automatically set FALSE interactive() == FALSE.","code":""},{"path":"https://ummel.github.io/fusionData/reference/uploadFiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Upload local fusionData files to remote Google Drive storage — uploadFiles","text":"Local files uploaded Google Drive account. Messages printed console confirming actions.","code":""}]
